{"version":3,"sources":["webpack:///./src/components/Sidebar/Friend/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/templates/author.js","webpack:///./src/components/Tag/index.js","webpack:///./src/components/Card/index.js","webpack:///./src/api/images.js","webpack:///./src/components/SEO/index.js"],"names":["config","friends","Friend","className","map","friend","ExternalLink","href","title","key","rel","LatestPost","posts","node","to","frontmatter","url","slug","fields","Information","totalCount","defaultProps","wordings","githubUsername","email","zhihuUsername","about","iconUrl","facebook","Icon","icon","target","Sidebar","latestPosts","name","image","desc","src","alt","profile","AuthorPage","data","pageContext","edges","allMarkdownRemark","author","console","log","picture","style","margin","description","fontSize","length","id","siteTitleAlt","isPost","pageQuery","Tag","count","isAuth","CardHeader","headerImage","color","backgroundColor","backgroundImage","parseImgur","Card","date","headerBackgroundColor","tags","rawImage","size","match","resizedImage","replace","small","medium","large","huge","parseImageTag","text","parseTitle","module","exports","getGalleryImage","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-templates-author-js-11571e2e480d74839e18.js","sourcesContent":["import React from 'react';\r\n\r\nimport ExternalLink from '../../ExternalLink';\r\n\r\nimport { config } from '../../../../data';\r\n\r\nimport './index.scss';\r\n\r\nconst { friends = [] } = config;\r\n\r\nconst Friend = () => (\r\n  <div className=\"friend\">\r\n    <p>友情鏈接</p>\r\n    {friends.map(friend => (\r\n      <ExternalLink\r\n        href={friend.href}\r\n        title={friend.title}\r\n        key={friend.title}\r\n        rel=\"noopener\"\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Friend;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.scss';\r\n\r\nconst LatestPost = ({ posts }) => (\r\n  <div className=\"latest-post\">\r\n    <p>最新文章</p>\r\n    {posts.map(({ node }) => (\r\n      <Link\r\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n      >\r\n        {node.frontmatter.title}\r\n      </Link>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nLatestPost.propTypes = {\r\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default LatestPost;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Friend from '../Friend';\r\nimport LatestPost from '../LatestPost';\r\nimport './index.scss';\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst Information = ({ totalCount, posts }) => (\r\n  <div className=\"d-none d-lg-block information my-2\">\r\n    <hr />\r\n    <p>\r\n      共&nbsp;\r\n      {totalCount}\r\n      &nbsp;篇文章\r\n    </p>\r\n    <hr />\r\n    <LatestPost posts={posts} />\r\n    <hr />\r\n    <Friend />\r\n  </div>\r\n);\r\n\r\nInformation.propTypes = {\r\n  totalCount: PropTypes.number.isRequired,\r\n  posts: PropTypes.array,\r\n};\r\n\r\nInformation.defaultProps = {\r\n  posts: [],\r\n};\r\n\r\nexport default Information;\r\n","import React from 'react';\r\nimport { Link, StaticQuery, graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { config } from '../../../data';\r\n\r\nimport Information from './Information';\r\n\r\nimport './index.scss';\r\n\r\nconst {\r\n  wordings = [],\r\n  githubUsername,\r\n  zhihuUsername,\r\n  email,\r\n  iconUrl,\r\n  about,\r\n  facebook,\r\n} = config;\r\n\r\nconst Icon = ({ href, icon }) => (\r\n  <a\r\n    target=\"_blank\"\r\n    href={href}\r\n    rel=\"external nofollow noopener noreferrer\"\r\n    className=\"custom-icon\"\r\n  >\r\n    <span className=\"fa-layers fa-fw fa-2x\">\r\n      <FontAwesomeIcon icon={icon} />\r\n    </span>\r\n  </a>\r\n);\r\n\r\nconst Sidebar = ({ totalCount, latestPosts, name, image, desc }) => (\r\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\r\n    <div className=\"about-me\">\r\n      <Link to={about} href={about} className=\"name\">\r\n        <img className=\"avatar\" src={image} alt={name} />\r\n        <h4>{name}</h4>\r\n      </Link>\r\n      {/* <p className=\"mb-1\">{wordings[0]}</p>\r\n      <p className=\"mb-3\">{wordings[1]}</p>\r\n      <Icon\r\n        href={`https://www.zhihu.com/people/${zhihuUsername}`}\r\n        icon={['fab', 'zhihu']}\r\n      /> */}\r\n      <Icon\r\n        href={`https://github.com/${githubUsername}`}\r\n        icon={['fab', 'github']}\r\n      />\r\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\r\n      {facebook\r\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\r\n      }\r\n      {/* <Information totalCount={totalCount} posts={latestPosts} /> */}\r\n      <div>\r\n        {desc}\r\n      </div>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nIcon.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nSidebar.propTypes = {\r\n  name: PropTypes.string,\r\n  image: PropTypes.string,\r\n  desc: PropTypes.string,\r\n  totalCount: PropTypes.number,\r\n  latestPosts: PropTypes.array, //eslint-disable-line\r\n};\r\n\r\nSidebar.defaultProps = {\r\n  name: 'Anon',\r\n  image: '',\r\n  desc: '',\r\n  totalCount: 0,\r\n  latestPosts: [],\r\n};\r\n\r\nexport default Sidebar;\r\n//   <StaticQuery\r\n//     query={graphql`\r\n//       fragment cardData on MarkdownRemark {\r\n//         fields {\r\n//           slug\r\n//         }\r\n//         frontmatter {\r\n//           id\r\n//           title\r\n//           url: slug\r\n//           date\r\n//           tags\r\n//           description\r\n//           headerImage\r\n//         }\r\n//       }\r\n\r\n//       query SidebarQuery {\r\n//         all: allMarkdownRemark {\r\n//           totalCount\r\n//         }\r\n\r\n//         limited: allMarkdownRemark(\r\n//           sort: { order: DESC, fields: frontmatter___date }\r\n//           limit: 6\r\n//         ) {\r\n//           latestPosts: edges {\r\n//             node {\r\n//               ...cardData\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n//     `}\r\n//     render={data => <Sidebar {...data.all} {...data.limited} />}\r\n//   />\r\n// );\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Card from '../components/Card';\r\nimport SEO from '../components/SEO';\r\nimport Sidebar from '../components/Sidebar';\r\nimport { config } from '../../data';\r\n\r\nconst {profile = [] } = config;\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst AuthorPage = ({ data, pageContext }) => {\r\n  const { edges } = data.allMarkdownRemark;\r\n  const { author } = pageContext;\r\n  console.log(profile[author].picture)\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          margin: 15,\r\n        }}\r\n      >\r\n        <Sidebar name={author} image={profile[author].picture} desc={profile[author].description}/>\r\n        {/* <div style={{ width: '20%' }} /> */}\r\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\r\n          <div\r\n            className=\"col-12\"\r\n            style={{\r\n              fontSize: 20,\r\n              margin: 15,\r\n            }}\r\n          > \r\n            {edges.length}\r\n            &nbsp;Article{edges.length > 1 ? 's' : ''} by&nbsp;\r\n            {author}\r\n          </div>\r\n          {edges.map(({ node }) => (\r\n            <Card {...node.frontmatter} key={node.id} />\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\r\n      </div>\r\n\r\n      <SEO\r\n        title={author}\r\n        url={`/author/${author}`}\r\n        siteTitleAlt=\"Visit My Studio Author\"\r\n        isPost={false}\r\n        description={author}\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthorPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query AuthorQuery($author: [String!]) {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: { frontmatter: { author: { in: $author } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            id\r\n            url: slug\r\n            title\r\n            date\r\n            tags\r\n            author\r\n            headerImage\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Tag = ({ name, count, isAuth }) => (\r\n  <a href={isAuth + name} className=\"header-tag\">\r\n    {name}\r\n    &nbsp;\r\n    {count}\r\n  </a>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: '',\r\n};\r\n\r\nexport default Tag;\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tag from '../Tag';\r\n\r\nimport { parseImgur } from '../../api/images';\r\n\r\nimport './index.scss';\r\n\r\nconst imageStyle = (headerImage, color) => ({\r\n  backgroundColor: `#${color}`,\r\n  backgroundImage: ` url(${parseImgur(headerImage, 'large')})`,\r\n});\r\n\r\nconst CardHeader = ({ url, image, backgroundColor }) => (\r\n  <Link to={url} href={url}>\r\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\r\n  </Link>\r\n);\r\n\r\nconst Card = ({\r\n  title,\r\n  author,\r\n  date,\r\n  url,\r\n  headerImage,\r\n  headerBackgroundColor,\r\n  description,\r\n  tags = [],\r\n}) => (\r\n  <div className=\"col-sm-12 pb-4\">\r\n    <div className=\"custom-card\">\r\n      {headerImage && (\r\n        <CardHeader\r\n          url={url}\r\n          image={headerImage}\r\n          backgroundColor={headerBackgroundColor}\r\n        />\r\n      )}\r\n      <div className=\"data\">\r\n        <div className=\"content\">\r\n          <div className=\"stats\">\r\n            {/* <span className=\"date\">{date.split('T')[0]}</span>\r\n            {tags.map(name => (\r\n              <Tag name={name} key={name} />\r\n            ))} */}\r\n          </div>\r\n          <Link to={url} href={url}>\r\n            <h4 className=\"title\">\n              {title}\n              {' '}\n              @\n              {author}\n            </h4>\r\n          </Link>\r\n          <p>{description}</p>\r\n          <Link to={url} href={url}>\r\n            ....continue\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  date: PropTypes.string,\r\n  url: PropTypes.string.isRequired,\r\n  headerImage: PropTypes.string,\r\n  headerBackgroundColor: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  tags: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nCardHeader.propTypes = Card.propTypes;\r\n\r\nCard.defaultProps = {\r\n  headerImage: '',\r\n  tags: [],\r\n  date: '',\r\n  headerBackgroundColor: '',\r\n};\r\n\r\nexport default Card;\r\n","// s = Small Square (90×90)\r\n// b = Big Square (160×160)\r\n// t = Small Thumbnail (160×160)\r\n// m = Medium Thumbnail (320×320)\r\n// l = Large Thumbnail (640×640)\r\n// h = Huge Thumbnail (1024×1024)\r\nconst defaultPicture = 'M795H8A.jpg';\r\n\r\nconst parseImgur = (rawImage, size = 'large') => {\r\n  if (!rawImage) {\r\n    return `https://i.imgur.com/${defaultPicture}`;\r\n  }\r\n\r\n  const mapping = {\r\n    'small-square': 's',\r\n    'big-square': 'b',\r\n    small: 't',\r\n    medium: 'm',\r\n    large: 'l',\r\n    huge: 'h',\r\n  };\r\n\r\n  // Don't resize the png image\r\n  // as there is a transparent bug in imgur\r\n  if (rawImage.match('(png)|(gif)')) {\r\n    // Prevent double http url\r\n    if (rawImage.match('http')) {\r\n      return rawImage;\r\n    }\r\n    return `https://i.imgur.com/${rawImage}`;\r\n  }\r\n\r\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\r\n  // Prevent double http url\r\n  if (resizedImage.match('http')) {\r\n    return resizedImage;\r\n  }\r\n  return `https://i.imgur.com/${resizedImage}`;\r\n};\r\n\r\nconst parseTitle = (title, text) => `title=\"${title || text}\"`;\r\n\r\nconst parseImageTag = ({ href, title, text }) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\r\n  href,\r\n  'large',\r\n)} ${parseTitle(title, text)} />`;\r\n\r\nconst getGalleryImage = ({ href, title, text }) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\r\n  href,\r\n  'huge',\r\n)}\">${parseImageTag({ href, title, text })}</a>`;\r\n\r\nmodule.exports = {\r\n  parseImgur,\r\n  parseImageTag,\r\n  getGalleryImage,\r\n};\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport config from '../../../data';\r\n\r\nconst schemaOrgJSONLD = ({\r\n  url,\r\n  title,\r\n  siteTitleAlt,\r\n  isPost,\r\n  image,\r\n  description,\r\n}) => [\r\n  {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'WebSite',\r\n    url,\r\n    name: title,\r\n    alternateName: siteTitleAlt || '',\r\n  },\r\n  isPost\r\n    ? {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BreadcrumbList',\r\n      itemListElement: [\r\n        {\r\n          '@type': 'ListItem',\r\n          position: 1,\r\n          item: {\r\n            '@id': url,\r\n            name: title,\r\n            image,\r\n          },\r\n        },\r\n      ],\r\n    }\r\n    : '',\r\n  isPost\r\n    ? {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BlogPosting',\r\n      url,\r\n      name: title,\r\n      alternateName: siteTitleAlt || '',\r\n      headline: title,\r\n      image: {\r\n        '@type': 'ImageObject',\r\n        url: image,\r\n      },\r\n      description,\r\n    }\r\n    : '',\r\n];\r\n\r\nconst SEO = ({\r\n  url, title, description, image, siteTitleAlt, isPost,\r\n}) => (\r\n  <Helmet>\r\n    <title>{title}</title>\r\n\r\n    {/* General tags */}\r\n    <meta name=\"description\" content={description} />\r\n    <meta name=\"image\" content={image} />\r\n\r\n    {/* Schema.org tags */}\r\n    <script type=\"application/ld+json\">\r\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\r\n    </script>\r\n\r\n    {/* OpenGraph tags */}\r\n    <meta property=\"og:url\" content={url} />\r\n    {isPost ? (\r\n      <meta property=\"og:type\" content=\"article\" />\r\n    ) : (\r\n      <meta property=\"og:type\" content=\"website\" />\r\n    )}\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={description} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta\r\n      property=\"fb:app_id\"\r\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n    />\r\n\r\n    {/* Twitter Card tags */}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta\r\n      name=\"twitter:creator\"\r\n      content={config.twitter_username ? config.twitter_username : ''}\r\n    />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={description} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n  </Helmet>\r\n);\r\n\r\nSEO.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  siteTitleAlt: PropTypes.string.isRequired,\r\n  isPost: PropTypes.bool.isRequired,\r\n};\r\n\r\nSEO.defaultProps = {\r\n  title: config.title,\r\n};\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}